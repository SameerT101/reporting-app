version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: reportapp-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: demo
      POSTGRES_PASSWORD: demo
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db:/docker-entrypoint-initdb.d
    networks:
      - reportapp-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U demo -d postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: reportapp-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - reportapp-network
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # MailHog (Email Testing Server)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: reportapp-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web UI
    networks:
      - reportapp-network
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8025" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # Spring Boot Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: reportapp-spring
    restart: unless-stopped
    environment:
      # Database configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres
      SPRING_DATASOURCE_USERNAME: demo
      SPRING_DATASOURCE_PASSWORD: demo
      
      # RabbitMQ configuration
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      
      # Mail configuration (MailHog)
      SPRING_MAIL_HOST: mailhog
      SPRING_MAIL_PORT: 1025
      
      # Auth0 configuration (keep the same as in application.yml)
      AUTH0_DOMAIN: dev-hyoevwsw21ygwvit.us.auth0.com
      AUTH0_ISSUER: https://dev-hyoevwsw21ygwvit.us.auth0.com/
      AUTH0_CLIENT_ID: WyaMFGaoas2yhW0ZiW069OEKrpeQj0cU
      AUTH0_CLIENT_SECRET: H47eXR2sKPkj_uvsYUd0OUrGJd8Cx-9qEjt1nb1Nxb8kDFGVrnGIXe0iUTr4eozM
      AUTH0_AUDIENCE: https://dev-hyoevwsw21ygwvit.us.auth0.com/api/v2/
      
      # Spring Security OAuth2 configuration
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_AUTH0_CLIENT_ID: WyaMFGaoas2yhW0ZiW069OEKrpeQj0cU
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_AUTH0_CLIENT_SECRET: H47eXR2sKPkj_uvsYUd0OUrGJd8Cx-9qEjt1nb1Nxb8kDFGVrnGIXe0iUTr4eozM
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_AUTH0_JWK_SET_URI: https://dev-hyoevwsw21ygwvit.us.auth0.com/.well-known/jwks.json
      
      # Logging
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_SAM_REPORTING: INFO
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mailhog:
        condition: service_healthy
    networks:
      - reportapp-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/api/public/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local

# Custom network
networks:
  reportapp-network:
    driver: bridge
